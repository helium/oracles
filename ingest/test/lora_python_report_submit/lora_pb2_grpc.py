# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import iot_pb2 as iot__pb2


class poc_iotStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.submit_iot_beacon = channel.unary_unary(
                '/helium.poc_iot.poc_iot/submit_iot_beacon',
                request_serializer=iot__pb2.iot_beacon_report_req_v1.SerializeToString,
                response_deserializer=iot__pb2.iot_beacon_report_resp_v1.FromString,
                )
        self.submit_iot_witness = channel.unary_unary(
                '/helium.poc_iot.poc_iot/submit_iot_witness',
                request_serializer=iot__pb2.iot_witness_report_req_v1.SerializeToString,
                response_deserializer=iot__pb2.iot_witness_report_resp_v1.FromString,
                )


class poc_iotServicer(object):
    """Missing associated documentation comment in .proto file."""

    def submit_iot_beacon(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submit_iot_witness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_poc_iotServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'submit_iot_beacon': grpc.unary_unary_rpc_method_handler(
                    servicer.submit_iot_beacon,
                    request_deserializer=iot__pb2.iot_beacon_report_req_v1.FromString,
                    response_serializer=iot__pb2.iot_beacon_report_resp_v1.SerializeToString,
            ),
            'submit_iot_witness': grpc.unary_unary_rpc_method_handler(
                    servicer.submit_iot_witness,
                    request_deserializer=iot__pb2.iot_witness_report_req_v1.FromString,
                    response_serializer=iot__pb2.iot_witness_report_resp_v1.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helium.poc_iot.poc_iot', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class poc_iot(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def submit_iot_beacon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helium.poc_iot.poc_iot/submit_iot_beacon',
            iot__pb2.iot_beacon_report_req_v1.SerializeToString,
            iot__pb2.iot_beacon_report_resp_v1.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def submit_iot_witness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helium.poc_iot.poc_iot/submit_iot_witness',
            iot__pb2.iot_witness_report_req_v1.SerializeToString,
            iot__pb2.iot_witness_report_resp_v1.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
