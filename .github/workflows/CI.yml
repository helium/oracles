name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
    tags: ["*"]
  workflow_dispatch: # Allows manual triggering
    inputs:
      release_version:
        description: "Release Version (e.g., 1.0.0)"
        required: false
        type: string
env:
  CARGO_INCREMENTAL: 0 # this setting is automatically applied by rust-cache but documented here for explicitness
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10

jobs:

  fmt:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-fmt
      cancel-in-progress: true
    steps:
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y tzdata curl build-essential pkg-config libssl-dev clang lld cmake unzip
          ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check formatting
        run: cargo fmt  -- --check

  clippy:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-clippy
      cancel-in-progress: true
    steps:
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y tzdata curl build-essential pkg-config libssl-dev clang lld cmake unzip
          ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clippy
        run: cargo clippy --all-targets -- -Dclippy::all -D warnings

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Cargo Workspace Members
        id: get-matrix
        run: |
          MATRIX=$(cargo metadata --format-version=1 | jq -c '[.workspace_members[] | split("#")[0] | split("/") | last | gsub("_"; "-") | select(. != "metrics")]')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo $MATRIX | jq
        shell: bash

  tests:
    needs: generate-matrix
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-tests-${{ matrix.package }}
      cancel-in-progress: true
    services:
      postgres:
        image: postgres:14.9-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            - 5432:5432
    steps:
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y tzdata curl build-essential pkg-config libssl-dev clang lld cmake unzip
          ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust install
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Test
        run: cargo test -p ${{ matrix.package }} --no-run

      - name: Run unit and integration tests
        env:
          DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
        run: cargo test -p ${{ matrix.package }}  -- --include-ignored

  build-release:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-build-release
      cancel-in-progress: true
    if: > 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '') ||
      (contains(github.ref, 'refs/tags/'))
    steps:
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y tzdata curl build-essential pkg-config libssl-dev clang lld cmake unzip
          ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust install
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu:20.04-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Release
        run: cargo build --all --release

  upload-release:
    needs: [build-release, fmt, clippy, tests]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-upload-release
      cancel-in-progress: true
    if: > 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '') ||
      (contains(github.ref, 'refs/tags/'))
    steps:
      - name: Show Inputs
        run: |
          echo "Release Version: ${{ github.event.inputs.release_version }}"

      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y tzdata curl build-essential pkg-config libssl-dev clang lld cmake unzip
          ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust install
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu:20.04-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Release
        run: cargo build --all --release

      - name: Debian packaging
        env:
          PACKAGECLOUD_API_KEY: ${{ secrets.PACKAGECLOUD_API_KEY }}
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          chmod +x ./.github/scripts/make_debian.sh
          ./.github/scripts/make_debian.sh